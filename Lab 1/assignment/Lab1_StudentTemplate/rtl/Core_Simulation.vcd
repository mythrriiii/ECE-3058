$date
	Wed Feb 14 13:29:30 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Core_tb $end
$var reg 1 ! clk $end
$var reg 7 " cycle_count [6:0] $end
$var reg 1 # mem_enable $end
$var reg 1 $ reset $end
$scope module core_proc $end
$var wire 1 ! clock $end
$var wire 1 # mem_en $end
$var wire 1 $ reset $end
$var wire 32 % pc_mux_select [31:0] $end
$var wire 32 & pc_branch_offset [31:0] $end
$var wire 32 ' next_instr_addr [31:0] $end
$var wire 1 ( mem_instr_req_valid $end
$var wire 1 ) mem_instr_data_valid $end
$var wire 1 * mem_gnt_req $end
$var wire 1 + mem_data_req_valid $end
$var wire 3 , lsu_operator [2:0] $end
$var wire 1 - lsu_en $end
$var wire 32 . load_mem_data [31:0] $end
$var wire 32 / instr_mem_data [31:0] $end
$var wire 32 0 instr_mem_addr [31:0] $end
$var wire 1 1 alu_valid $end
$var wire 32 2 alu_result [31:0] $end
$var wire 7 3 alu_operator [6:0] $end
$var wire 32 4 alu_operand_b [31:0] $end
$var wire 32 5 alu_operand_a [31:0] $end
$var wire 1 6 alu_en $end
$var wire 32 7 DRAM_wdata [31:0] $end
$var wire 32 8 DRAM_load_mem_data [31:0] $end
$scope module ALUModule $end
$var wire 1 $ reset $end
$var wire 7 9 alu_operator_ip [6:0] $end
$var wire 32 : alu_operand_b_ip [31:0] $end
$var wire 32 ; alu_operand_a_ip [31:0] $end
$var wire 1 6 alu_enable_ip $end
$var reg 32 < alu_result_op [31:0] $end
$var reg 1 1 alu_valid_op $end
$upscope $end
$scope module DecodeModule $end
$var wire 32 = alu_result_ip [31:0] $end
$var wire 1 1 alu_result_valid_ip $end
$var wire 1 ! clock $end
$var wire 1 $ reset $end
$var wire 32 > valid_instr_to_decode [31:0] $end
$var wire 5 ? regfile_write_addr_a_id [4:0] $end
$var wire 5 @ regfile_read_addr_b_id [4:0] $end
$var wire 5 A regfile_read_addr_a_id [4:0] $end
$var wire 32 B regfile_b_out [31:0] $end
$var wire 32 C regfile_a_out [31:0] $end
$var wire 32 D pc4 [31:0] $end
$var wire 32 E pc [31:0] $end
$var wire 1 + mem_data_valid_ip $end
$var wire 32 F mem_data_ip [31:0] $end
$var wire 1 ) instr_data_valid_ip $end
$var wire 32 G instr_data_ip [31:0] $end
$var wire 1 6 alu_en_op $end
$var reg 32 H alu_operand_a_ex_op [31:0] $end
$var reg 32 I alu_operand_b_ex_op [31:0] $end
$var reg 7 J alu_operator_op [6:0] $end
$var reg 1 - en_lsu_op $end
$var reg 3 K lsu_operator_op [2:0] $end
$var reg 32 L mem_wdata_op [31:0] $end
$var reg 3 M operand_b_select [2:0] $end
$var reg 32 N pc_branch_offset_op [31:0] $end
$var reg 32 O regfile_write_data [31:0] $end
$var reg 1 P regfile_write_data_valid $end
$var reg 3 Q writeback_mux [2:0] $end
$var integer 32 R operand_a_select [31:0] $end
$var integer 32 S pc_mux_op [31:0] $end
$scope module register_file $end
$var wire 1 ! clock $end
$var wire 5 T raddr_a_ip [4:0] $end
$var wire 32 U raddr_a_op [31:0] $end
$var wire 5 V raddr_b_ip [4:0] $end
$var wire 32 W raddr_b_op [31:0] $end
$var wire 1 $ reset $end
$var wire 5 X waddr_a [4:0] $end
$var wire 5 Y waddr_a_ip [4:0] $end
$var wire 32 Z wdata_a_ip [31:0] $end
$var wire 1 P we_a_ip $end
$var wire 32 [ write_enable_a_dec [31:0] $end
$scope begin RF[1] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 \ data_ip [31:0] $end
$var wire 1 ] enable $end
$var wire 1 $ reset $end
$var reg 32 ^ data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[2] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 _ data_ip [31:0] $end
$var wire 1 ` enable $end
$var wire 1 $ reset $end
$var reg 32 a data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[3] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 b data_ip [31:0] $end
$var wire 1 c enable $end
$var wire 1 $ reset $end
$var reg 32 d data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[4] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 e data_ip [31:0] $end
$var wire 1 f enable $end
$var wire 1 $ reset $end
$var reg 32 g data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[5] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 h data_ip [31:0] $end
$var wire 1 i enable $end
$var wire 1 $ reset $end
$var reg 32 j data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[6] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 k data_ip [31:0] $end
$var wire 1 l enable $end
$var wire 1 $ reset $end
$var reg 32 m data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[7] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 n data_ip [31:0] $end
$var wire 1 o enable $end
$var wire 1 $ reset $end
$var reg 32 p data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[8] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 q data_ip [31:0] $end
$var wire 1 r enable $end
$var wire 1 $ reset $end
$var reg 32 s data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[9] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 t data_ip [31:0] $end
$var wire 1 u enable $end
$var wire 1 $ reset $end
$var reg 32 v data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[10] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 w data_ip [31:0] $end
$var wire 1 x enable $end
$var wire 1 $ reset $end
$var reg 32 y data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[11] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 z data_ip [31:0] $end
$var wire 1 { enable $end
$var wire 1 $ reset $end
$var reg 32 | data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[12] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 } data_ip [31:0] $end
$var wire 1 ~ enable $end
$var wire 1 $ reset $end
$var reg 32 !" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[13] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 "" data_ip [31:0] $end
$var wire 1 #" enable $end
$var wire 1 $ reset $end
$var reg 32 $" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[14] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 %" data_ip [31:0] $end
$var wire 1 &" enable $end
$var wire 1 $ reset $end
$var reg 32 '" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[15] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 (" data_ip [31:0] $end
$var wire 1 )" enable $end
$var wire 1 $ reset $end
$var reg 32 *" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[16] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 +" data_ip [31:0] $end
$var wire 1 ," enable $end
$var wire 1 $ reset $end
$var reg 32 -" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[17] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 ." data_ip [31:0] $end
$var wire 1 /" enable $end
$var wire 1 $ reset $end
$var reg 32 0" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[18] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 1" data_ip [31:0] $end
$var wire 1 2" enable $end
$var wire 1 $ reset $end
$var reg 32 3" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[19] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 4" data_ip [31:0] $end
$var wire 1 5" enable $end
$var wire 1 $ reset $end
$var reg 32 6" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[20] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 7" data_ip [31:0] $end
$var wire 1 8" enable $end
$var wire 1 $ reset $end
$var reg 32 9" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[21] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 :" data_ip [31:0] $end
$var wire 1 ;" enable $end
$var wire 1 $ reset $end
$var reg 32 <" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[22] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 =" data_ip [31:0] $end
$var wire 1 >" enable $end
$var wire 1 $ reset $end
$var reg 32 ?" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[23] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 @" data_ip [31:0] $end
$var wire 1 A" enable $end
$var wire 1 $ reset $end
$var reg 32 B" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[24] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 C" data_ip [31:0] $end
$var wire 1 D" enable $end
$var wire 1 $ reset $end
$var reg 32 E" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[25] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 F" data_ip [31:0] $end
$var wire 1 G" enable $end
$var wire 1 $ reset $end
$var reg 32 H" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[26] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 I" data_ip [31:0] $end
$var wire 1 J" enable $end
$var wire 1 $ reset $end
$var reg 32 K" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[27] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 L" data_ip [31:0] $end
$var wire 1 M" enable $end
$var wire 1 $ reset $end
$var reg 32 N" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[28] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 O" data_ip [31:0] $end
$var wire 1 P" enable $end
$var wire 1 $ reset $end
$var reg 32 Q" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[29] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 R" data_ip [31:0] $end
$var wire 1 S" enable $end
$var wire 1 $ reset $end
$var reg 32 T" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[30] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 U" data_ip [31:0] $end
$var wire 1 V" enable $end
$var wire 1 $ reset $end
$var reg 32 W" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin RF[31] $end
$scope module RF $end
$var wire 1 ! clock $end
$var wire 32 X" data_ip [31:0] $end
$var wire 1 Y" enable $end
$var wire 1 $ reset $end
$var reg 32 Z" data_op [31:0] $end
$upscope $end
$upscope $end
$scope begin gen_we_encoder[0] $end
$upscope $end
$scope begin gen_we_encoder[1] $end
$upscope $end
$scope begin gen_we_encoder[2] $end
$upscope $end
$scope begin gen_we_encoder[3] $end
$upscope $end
$scope begin gen_we_encoder[4] $end
$upscope $end
$scope begin gen_we_encoder[5] $end
$upscope $end
$scope begin gen_we_encoder[6] $end
$upscope $end
$scope begin gen_we_encoder[7] $end
$upscope $end
$scope begin gen_we_encoder[8] $end
$upscope $end
$scope begin gen_we_encoder[9] $end
$upscope $end
$scope begin gen_we_encoder[10] $end
$upscope $end
$scope begin gen_we_encoder[11] $end
$upscope $end
$scope begin gen_we_encoder[12] $end
$upscope $end
$scope begin gen_we_encoder[13] $end
$upscope $end
$scope begin gen_we_encoder[14] $end
$upscope $end
$scope begin gen_we_encoder[15] $end
$upscope $end
$scope begin gen_we_encoder[16] $end
$upscope $end
$scope begin gen_we_encoder[17] $end
$upscope $end
$scope begin gen_we_encoder[18] $end
$upscope $end
$scope begin gen_we_encoder[19] $end
$upscope $end
$scope begin gen_we_encoder[20] $end
$upscope $end
$scope begin gen_we_encoder[21] $end
$upscope $end
$scope begin gen_we_encoder[22] $end
$upscope $end
$scope begin gen_we_encoder[23] $end
$upscope $end
$scope begin gen_we_encoder[24] $end
$upscope $end
$scope begin gen_we_encoder[25] $end
$upscope $end
$scope begin gen_we_encoder[26] $end
$upscope $end
$scope begin gen_we_encoder[27] $end
$upscope $end
$scope begin gen_we_encoder[28] $end
$upscope $end
$scope begin gen_we_encoder[29] $end
$upscope $end
$scope begin gen_we_encoder[30] $end
$upscope $end
$scope begin gen_we_encoder[31] $end
$upscope $end
$scope module RF0 $end
$var wire 1 ! clock $end
$var wire 32 [" data_ip [31:0] $end
$var wire 1 \" enable $end
$var wire 1 $ reset $end
$var reg 32 ]" data_op [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module FetchModule $end
$var wire 1 ^" Instr_or_Data_op $end
$var wire 32 _" alu_result_ip [31:0] $end
$var wire 1 ! clock $end
$var wire 32 `" pc_branch_offset_ip [31:0] $end
$var wire 32 a" pc_mux_ip [31:0] $end
$var wire 1 $ reset $end
$var wire 1 * instr_gnt_ip $end
$var reg 32 b" Next_PC [31:0] $end
$var reg 32 c" PC [31:0] $end
$var reg 32 d" instr_addr_op [31:0] $end
$var reg 1 ( instr_req_op $end
$var reg 32 e" next_instr_addr_op [31:0] $end
$upscope $end
$scope module LoadStoreUnit $end
$var wire 1 1 alu_valid_ip $end
$var wire 1 ! clock $end
$var wire 1 - lsu_en_ip $end
$var wire 3 f" lsu_operator_ip [2:0] $end
$var wire 32 g" mem_addr_ip [31:0] $end
$var wire 1 $ reset $end
$var wire 1 h" valid_mem_operation $end
$var wire 32 i" mem_data_ip [31:0] $end
$var wire 1 * data_gnt_i $end
$var reg 1 + data_req_op $end
$var reg 32 j" load_mem_data_op [31:0] $end
$upscope $end
$scope module MainMemory $end
$var wire 1 ! clock $end
$var wire 32 k" data_addr_ip [31:0] $end
$var wire 1 + data_req_ip $end
$var wire 32 l" instr_addr_ip [31:0] $end
$var wire 1 ( instr_req_ip $end
$var wire 3 m" lsu_operator [2:0] $end
$var wire 1 # mem_en $end
$var wire 32 n" wdata_ip [31:0] $end
$var wire 1 * mem_gnt_op $end
$var reg 32 o" instr_data_op [31:0] $end
$var reg 1 ) instr_valid_op $end
$var reg 32 p" load_data_op [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 q" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000000 q"
bx p"
bz o"
bz n"
b0 m"
bx l"
b0 k"
bz j"
bx i"
0h"
b0 g"
b0 f"
bx e"
bx d"
bx c"
bx b"
b0 a"
bx `"
b0 _"
0^"
bx ]"
0\"
bz ["
bx Z"
0Y"
bz X"
bx W"
0V"
bz U"
bx T"
0S"
bz R"
bx Q"
0P"
bz O"
bx N"
0M"
bz L"
bx K"
0J"
bz I"
bx H"
0G"
bz F"
bx E"
0D"
bz C"
bx B"
0A"
bz @"
bx ?"
0>"
bz ="
bx <"
0;"
bz :"
bx 9"
08"
bz 7"
bx 6"
05"
bz 4"
bx 3"
02"
bz 1"
bx 0"
0/"
bz ."
bx -"
0,"
bz +"
bx *"
0)"
bz ("
bx '"
0&"
bz %"
bx $"
0#"
bz ""
bx !"
0~
bz }
bx |
0{
bz z
bx y
0x
bz w
bx v
0u
bz t
bx s
0r
bz q
bx p
0o
bz n
bx m
0l
bz k
bx j
0i
bz h
bx g
0f
bz e
bx d
0c
bz b
bx a
0`
bz _
bx ^
0]
bz \
b0 [
bz Z
bz Y
bz X
bx W
bz V
bx U
bz T
b0 S
b10 R
b0 Q
0P
bz O
bx N
b101 M
bz L
b0 K
b0 J
bz I
bz H
bz G
bz F
bx E
bx D
bx C
bx B
bz A
bz @
bz ?
bz >
b0 =
b0 <
bz ;
bz :
b0 9
bx 8
bz 7
06
bz 5
bz 4
b0 3
b0 2
01
bx 0
bz /
bz .
0-
b0 ,
0+
1*
0)
x(
bx '
bx &
b0 %
1$
1#
b0 "
1!
$end
#1
0!
#2
b100 b"
b0 c"
0(
b0 '
b0 D
b0 e"
b0 0
b0 E
b0 d"
b0 l"
b0 ^
b0 a
b0 d
b0 g
b0 j
b0 m
b0 p
b0 s
b0 v
b0 y
b0 |
b0 !"
b0 $"
b0 '"
b0 *"
b0 -"
b0 0"
b0 3"
b0 6"
b0 9"
b0 <"
b0 ?"
b0 B"
b0 E"
b0 H"
b0 K"
b0 N"
b0 Q"
b0 T"
b0 W"
b0 Z"
b0 ]"
1!
#3
0!
#4
1!
#5
0!
#6
1i
b100000 [
1P
16
11
b1010000 2
b1010000 <
b1010000 =
b1010000 _"
b1010000 g"
b1010000 k"
b1010000 O
b1010000 Z
b1010000 \
b1010000 _
b1010000 b
b1010000 e
b1010000 h
b1010000 k
b1010000 n
b1010000 q
b1010000 t
b1010000 w
b1010000 z
b1010000 }
b1010000 ""
b1010000 %"
b1010000 ("
b1010000 +"
b1010000 ."
b1010000 1"
b1010000 4"
b1010000 7"
b1010000 :"
b1010000 ="
b1010000 @"
b1010000 C"
b1010000 F"
b1010000 I"
b1010000 L"
b1010000 O"
b1010000 R"
b1010000 U"
b1010000 X"
b1010000 ["
b0 5
b0 ;
b0 H
b0 C
b0 U
b101 A
b101 T
b0 B
b0 W
b10000 @
b10000 V
b101 X
b101 ?
b101 Y
b1010000 4
b1010000 :
b1010000 I
b11000 3
b11000 9
b11000 J
b1 Q
b1 M
b0 R
b101000000101000001010010011 >
b1000 b"
b101000000101000001010010011 /
b101000000101000001010010011 G
b101000000101000001010010011 o"
1)
b100 c"
b1000 '
b1000 D
b1000 e"
1(
b100 0
b100 E
b100 d"
b100 l"
b1 "
1!
0$
#7
0!
#8
1f
0i
b10000 [
b1100100 O
b1100100 Z
b1100100 \
b1100100 _
b1100100 b
b1100100 e
b1100100 h
b1100100 k
b1100100 n
b1100100 q
b1100100 t
b1100100 w
b1100100 z
b1100100 }
b1100100 ""
b1100100 %"
b1100100 ("
b1100100 +"
b1100100 ."
b1100100 1"
b1100100 4"
b1100100 7"
b1100100 :"
b1100100 ="
b1100100 @"
b1100100 C"
b1100100 F"
b1100100 I"
b1100100 L"
b1100100 O"
b1100100 R"
b1100100 U"
b1100100 X"
b1100100 ["
b10100 @
b10100 V
b100 X
b100 ?
b100 Y
b10100 4
b10100 :
b10100 I
b1 Q
b1 M
b0 R
b11000 3
b11000 9
b11000 J
b1100100 2
b1100100 <
b1100100 =
b1100100 _"
b1100100 g"
b1100100 k"
b1010000101000001000010011 >
b1010000 5
b1010000 ;
b1010000 H
b1010000101000001000010011 /
b1010000101000001000010011 G
b1010000101000001000010011 o"
b1100 b"
b10 "
b1010000 j
b1010000 C
b1010000 U
b1100 '
b1100 D
b1100 e"
b1000 0
b1000 E
b1000 d"
b1000 l"
b1000 c"
1!
#9
0!
#10
0f
1x
b10000000000 [
b10110100 O
b10110100 Z
b10110100 \
b10110100 _
b10110100 b
b10110100 e
b10110100 h
b10110100 k
b10110100 n
b10110100 q
b10110100 t
b10110100 w
b10110100 z
b10110100 }
b10110100 ""
b10110100 %"
b10110100 ("
b10110100 +"
b10110100 ."
b10110100 1"
b10110100 4"
b10110100 7"
b10110100 :"
b10110100 ="
b10110100 @"
b10110100 C"
b10110100 F"
b10110100 I"
b10110100 L"
b10110100 O"
b10110100 R"
b10110100 U"
b10110100 X"
b10110100 ["
b10110100 2
b10110100 <
b10110100 =
b10110100 _"
b10110100 g"
b10110100 k"
b1100100 B
b1100100 W
b100 @
b100 V
b1010 X
b1010 ?
b1010 Y
b1100100 4
b1100100 :
b1100100 I
b1 Q
b0 M
b0 R
b11000 3
b11000 9
b11000 J
b10000101000010100110011 >
b10000 b"
b10000101000010100110011 /
b10000101000010100110011 G
b10000101000010100110011 o"
b1100 c"
b10000 '
b10000 D
b10000 e"
b1100 0
b1100 E
b1100 d"
b1100 l"
b1100100 g
b11 "
1!
#11
0!
#12
0x
1~
b1000000000000 [
b11111111111111111111111111101100 O
b11111111111111111111111111101100 Z
b11111111111111111111111111101100 \
b11111111111111111111111111101100 _
b11111111111111111111111111101100 b
b11111111111111111111111111101100 e
b11111111111111111111111111101100 h
b11111111111111111111111111101100 k
b11111111111111111111111111101100 n
b11111111111111111111111111101100 q
b11111111111111111111111111101100 t
b11111111111111111111111111101100 w
b11111111111111111111111111101100 z
b11111111111111111111111111101100 }
b11111111111111111111111111101100 ""
b11111111111111111111111111101100 %"
b11111111111111111111111111101100 ("
b11111111111111111111111111101100 +"
b11111111111111111111111111101100 ."
b11111111111111111111111111101100 1"
b11111111111111111111111111101100 4"
b11111111111111111111111111101100 7"
b11111111111111111111111111101100 :"
b11111111111111111111111111101100 ="
b11111111111111111111111111101100 @"
b11111111111111111111111111101100 C"
b11111111111111111111111111101100 F"
b11111111111111111111111111101100 I"
b11111111111111111111111111101100 L"
b11111111111111111111111111101100 O"
b11111111111111111111111111101100 R"
b11111111111111111111111111101100 U"
b11111111111111111111111111101100 X"
b11111111111111111111111111101100 ["
b11111111111111111111111111101100 2
b11111111111111111111111111101100 <
b11111111111111111111111111101100 =
b11111111111111111111111111101100 _"
b11111111111111111111111111101100 g"
b11111111111111111111111111101100 k"
b1100 X
b1100 ?
b1100 Y
b1 Q
b0 M
b0 R
b11001 3
b11001 9
b11001 J
b1000000010000101000011000110011 >
b1000000010000101000011000110011 /
b1000000010000101000011000110011 G
b1000000010000101000011000110011 o"
b10100 b"
b100 "
b10110100 y
b10100 '
b10100 D
b10100 e"
b10000 0
b10000 E
b10000 d"
b10000 l"
b10000 c"
1!
#13
0!
#14
0~
b0 [
bz O
bz Z
bz \
bz _
bz b
bz e
bz h
bz k
bz n
bz q
bz t
bz w
bz z
bz }
bz ""
bz %"
bz ("
bz +"
bz ."
bz 1"
bz 4"
bz 7"
bz :"
bz ="
bz @"
bz C"
bz F"
bz I"
bz L"
bz O"
bz R"
bz U"
bz X"
bz ["
0P
bz 5
bz ;
bz H
06
01
b0 2
b0 <
b0 =
b0 _"
b0 g"
b0 k"
b0 C
b0 U
b0 A
b0 T
b0 B
b0 W
b0 @
b0 V
b0 X
b0 ?
b0 Y
bz 4
bz :
bz I
b0 Q
b101 M
b10 R
b0 3
b0 9
b0 J
b0 >
b11000 b"
b0 /
b0 G
b0 o"
b10100 c"
b11000 '
b11000 D
b11000 e"
b10100 0
b10100 E
b10100 d"
b10100 l"
b11111111111111111111111111101100 !"
b101 "
1!
#15
0!
#16
b11100 b"
b110 "
b11100 '
b11100 D
b11100 e"
b11000 0
b11000 E
b11000 d"
b11000 l"
b11000 c"
1!
#17
0!
#18
b100000 b"
b11100 c"
b100000 '
b100000 D
b100000 e"
b11100 0
b11100 E
b11100 d"
b11100 l"
b111 "
1!
#19
0!
#20
b100100 b"
b1000 "
b100100 '
b100100 D
b100100 e"
b100000 0
b100000 E
b100000 d"
b100000 l"
b100000 c"
1!
#21
0!
#22
b101000 b"
b100100 c"
b101000 '
b101000 D
b101000 e"
b100100 0
b100100 E
b100100 d"
b100100 l"
b1001 "
1!
#23
0!
#24
b101100 b"
b1010 "
b101100 '
b101100 D
b101100 e"
b101000 0
b101000 E
b101000 d"
b101000 l"
b101000 c"
1!
#25
0!
#26
b110000 b"
b101100 c"
b110000 '
b110000 D
b110000 e"
b101100 0
b101100 E
b101100 d"
b101100 l"
b1011 "
1!
#27
0!
#28
b110100 b"
b1100 "
b110100 '
b110100 D
b110100 e"
b110000 0
b110000 E
b110000 d"
b110000 l"
b110000 c"
1!
#29
0!
#30
b111000 b"
b110100 c"
b111000 '
b111000 D
b111000 e"
b110100 0
b110100 E
b110100 d"
b110100 l"
b1101 "
1!
#31
0!
#32
b111100 b"
b1110 "
b111100 '
b111100 D
b111100 e"
b111000 0
b111000 E
b111000 d"
b111000 l"
b111000 c"
1!
#33
0!
#34
b1000000 b"
b111100 c"
b1000000 '
b1000000 D
b1000000 e"
b111100 0
b111100 E
b111100 d"
b111100 l"
b1111 "
1!
#35
0!
#36
b1000100 b"
b10000 "
b1000100 '
b1000100 D
b1000100 e"
b1000000 0
b1000000 E
b1000000 d"
b1000000 l"
b1000000 c"
1!
#37
0!
#38
b1001000 b"
b1000100 c"
b1001000 '
b1001000 D
b1001000 e"
b1000100 0
b1000100 E
b1000100 d"
b1000100 l"
b10001 "
1!
#39
0!
#40
b1001100 b"
b10010 "
b1001100 '
b1001100 D
b1001100 e"
b1001000 0
b1001000 E
b1001000 d"
b1001000 l"
b1001000 c"
1!
#41
0!
#42
b1010000 b"
b1001100 c"
b1010000 '
b1010000 D
b1010000 e"
b1001100 0
b1001100 E
b1001100 d"
b1001100 l"
b10011 "
1!
#43
0!
#44
b1010100 b"
b10100 "
b1010100 '
b1010100 D
b1010100 e"
b1010000 0
b1010000 E
b1010000 d"
b1010000 l"
b1010000 c"
1!
#45
0!
#46
b1011000 b"
b1010100 c"
b1011000 '
b1011000 D
b1011000 e"
b1010100 0
b1010100 E
b1010100 d"
b1010100 l"
b10101 "
1!
#47
0!
#48
b1011100 b"
b10110 "
b1011100 '
b1011100 D
b1011100 e"
b1011000 0
b1011000 E
b1011000 d"
b1011000 l"
b1011000 c"
1!
#49
0!
#50
b1100000 b"
b1011100 c"
b1100000 '
b1100000 D
b1100000 e"
b1011100 0
b1011100 E
b1011100 d"
b1011100 l"
b10111 "
1!
#51
0!
#52
b1100100 b"
b11000 "
b1100100 '
b1100100 D
b1100100 e"
b1100000 0
b1100000 E
b1100000 d"
b1100000 l"
b1100000 c"
1!
#53
0!
#54
b1101000 b"
b1100100 c"
b1101000 '
b1101000 D
b1101000 e"
b1100100 0
b1100100 E
b1100100 d"
b1100100 l"
b11001 "
1!
#55
0!
#56
b1101100 b"
b11010 "
b1101100 '
b1101100 D
b1101100 e"
b1101000 0
b1101000 E
b1101000 d"
b1101000 l"
b1101000 c"
1!
